name: Build and Deploy Spring Boot Project

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.5.0

      - name: Set up JDK 20
        uses: actions/setup-java@v2
        with:
          java-version: 20
          distribution: 'adopt'

      - name: Build
        run: |
          chmod +x mvnw
          ./mvnw clean install

      - name: Print Build Artifact Contents
        run: |
          ls -R ./target

      - name: Get Commit ID
        id: commit_id
        run: echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: |
            docker.io/kamil571/turingsec_spring_boot:latest
            docker.io/kamil571/turingsec_spring_boot:${{ env.commit_id }}

      - name: Drop All Tables in AWS RDS
        run: |
          psql -h ${{ secrets.RDS_HOST }} -U ${{ secrets.RDS_USER }} -d ${{ secrets.RDS_DB }} -p ${{ secrets.RDS_PORT }} -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        env:
          PGPASSWORD: ${{ secrets.RDS_PASSWORD }}

      - name: Decode EC2 Key
        run: |
          echo "${{ secrets.EC2_KEY}}" | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_KEY }}
          HOSTNAME: ${{ secrets.EC2_HOST }}
          USER_NAME: ${{ secrets.EC2_USER }}
        run: |
              # Save the private key to a file and set appropriate permissions
              echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
              
              # Connect via SSH and run the deployment commands
              ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
                # Pull the latest Docker image
                sudo docker pull docker.io/kamil571/turingsec_spring_boot:latest
              
                # Stop and remove existing container if it exists
                sudo docker stop turingSecContainer || true
                sudo docker rm turingSecContainer || true
              
                # Run the new Docker container with the required environment variables
                sudo docker run -d -p 443:8080 \
                  -e SPRING_PROFILES_ACTIVE=prod \
                  -e CERTIFICATE_PATH=${{ secrets.CERTIFICATE_PATH }} \
                  -e KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }} \
                  -e APP_ROOT_URL=${{ secrets.APP_ROOT_URL }} \
                  -e DB_HOST=${{ secrets.RDS_HOST }} \
                  -e DB_PORT=${{ secrets.RDS_PORT }} \
                  -e DB_NAME=${{ secrets.RDS_DB }} \
                  -e DB_USER=${{ secrets.RDS_USER }} \
                  -e DB_PASSWORD=${{ secrets.RDS_PASSWORD }} \
                  --name turingSecContainer \
                  -v turingsec_cert_volume:/cert_storage \
                  docker.io/kamil571/turingsec_spring_boot:latest
              '