name: Build and Deploy Spring Boot Project

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.5.0

      - name: Set up JDK 20
        uses: actions/setup-java@v2
        with:
          java-version: 20
          distribution: 'adopt'

      - name: Build
        run: |
          chmod +x mvnw
          ./mvnw clean install

      - name: Print Build Artifact Contents
        run: |
          ls -R ./target

      - name: Get Commit ID
        id: commit_id
        run: echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: |
            docker.io/kamil571/turingsec_spring_boot:latest
            docker.io/kamil571/turingsec_spring_boot:${{ env.commit_id }}

      - name: Drop All Tables in AWS RDS
        run: |
          psql -h ${{ secrets.RDS_HOST }} -U ${{ secrets.RDS_USER }} -d ${{ secrets.RDS_DB }} -p ${{ secrets.RDS_PORT }} -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        env:
          PGPASSWORD: ${{ secrets.RDS_PASSWORD }}

      - name: Set up SSH key
        run: |
            env
            mkdir -p ~/.ssh
            echo "Setting up SSH key..."
            echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ls -l ~/.ssh/id_rsa
            echo "Adding host to known_hosts..."
            ssh-keyscan -p 22 ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v "${{ secrets.EC2_USER }}"@"${{ secrets.EC2_HOST }}" << 'ENDSSH'
          echo "test"
          ENDSSH
#      - name: Deploy to EC2
#        env:
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#          EC2_USER: ${{ secrets.EC2_USER }}
#        run: |
#          ssh -i ec2_key.pem -o StrictHostKeyChecking=no -t -t $EC2_USER@$EC2_HOST << 'EOF'
#            # Pull the latest Docker image
#            sudo docker pull docker.io/kamil571/turingsec_spring_boot:latest
#
#            # Stop and remove existing container if it exists
#            sudo docker stop turingSecContainer || true
#            sudo docker rm turingSecContainer || true
#
#            # Run the new Docker container with the required environment variables
#            sudo docker run -d -p 443:8080 \
#              -e SPRING_PROFILES_ACTIVE=prod \
#              -e CERTIFICATE_PATH=${{ secrets.CERTIFICATE_PATH }} \
#              -e KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }} \
#              -e APP_ROOT_URL=${{ secrets.APP_ROOT_URL }} \
#              -e DB_HOST=${{ secrets.RDS_HOST }} \
#              -e DB_PORT=${{ secrets.RDS_PORT }} \
#              -e DB_NAME=${{ secrets.RDS_DB }} \
#              -e DB_USER=${{ secrets.RDS_USER }} \
#              -e DB_PASSWORD=${{ secrets.RDS_PASSWORD }} \
#              --name turingSecContainer \
#              -v turingsec_cert_volume:/cert_storage \
#              docker.io/kamil571/turingsec_spring_boot:latest
#          EOF

# https://medium.com/@balazskocsis/deploying-to-a-server-with-github-actions-a-deep-dive-e8558e83a4d7